"use strict";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{return Promise.resolve(value).then(function(value){step("next",value)},function(err){step("throw",err)})}}return step("next")})}}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}var nSQL=require("nano-sql").nSQL;var Database=function(){function Database(){_classCallCheck(this,Database)}_createClass(Database,null,[{key:"Setup",value:function(){var _ref=_asyncToGenerator(regeneratorRuntime.mark(function _callee(models){var _this=this;return regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!this.db){_context.next=2;break}throw new Error("The database was already initialized");case 2:this.db=nSQL();models.forEach(function(modelClass){nSQL(modelClass.table).model(modelClass.schema)});return _context.abrupt("return",new Promise(function(res,rej){_this.db.config({persistent:true,history:false}).connect().then(function(result,db){models.forEach(function(modelClass){modelClass.db=db});res(db)})}));case 5:case"end":return _context.stop();}}},_callee,this)}));function Setup(_x){return _ref.apply(this,arguments)}return Setup}()}]);return Database}();module.exports=Database;